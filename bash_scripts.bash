
bash script 1
დაწერეთ Bash სკრიპტი, რომელიც შეამოწმებს სისტემაში არსებული მომხმარებლების რაოდენობას. შემდეგ შექმნის report.txt ფაილს, სადაც ჩაწერს თითოეული მომხმარებლის სახელს, მათ home დირექტორიას და შელის ტიპს. ასევე ფაილის ბოლოში დაამატებს მომხმარებლების საერთო რაოდენობას.
ნებისმიერ შემთხვევაში script ფაილში მიუთითეთ თქვენი სახელი როგორც ფაილის შემქმნელის და ასევე დოკუმენტაციისთვის სკრიპტშივე აღწერეთ შესრულებული ოპერაციები. მუშა სკრიპტი შეგიძლიათ ფაილის სახით თან დაურთოთ საგამოცდო ფაილს.
#!/bin/bash
# ავტორი: [თქვენი სახელი]
# აღწერა: ეს სკრიპტი გატარებს სისტემაში არსებული მომხმარებლების რაოდენობის შემოწმებას,
#         ქმნის report.txt ფაილს, სადაც თითოეული მომხმარებლის სახელი, მათ home დირექტორია და შელის ტიპი წერია.
#         ფაილის ბოლოს დაამატებს საერთო მომხმარებლების რაოდენობას.

# ვაჩვენოთ, რომ report.txt ფაილი უნდა იყოს ცარიელი ან შექმნან ახალი
echo "User Report" > report.txt
echo "======================" >> report.txt

# მომხმარებლების რაოდენობის დასაწყისი
total_users=0

# თითოეული მომხმარებლის სახელი, დირექტორია და შელი 
for user in $(cut -d: -f1 /etc/passwd); do
    # სახლის დირექტორია
    home=$(getent passwd $user | cut -d: -f6)
    
    # შელის ტიპი
    shell=$(getent passwd $user | cut -d: -f7)
    
    # დაწერეთ ეს მონაცემები report.txt ფაილში
    echo "Username: $user, Home: $home, Shell: $shell" >> report.txt
    
    # მომხმარებლების საერთო რაოდენობა
    total_users=$((total_users+1))
done

# მომხმარებლების საერთო რაოდენობა ბოლო ნაწილი
echo "======================" >> report.txt
echo "Total Users: $total_users" >> report.txt

# სკრიპტის დასრულება
echo "Report successfully generated in report.txt."







bash script 2
დაწერეთ Bash სკრიპტი, რომელიც შეამოწმებს სისტემის მეხსიერების გამოყენებას. თუ თავისუფალი მეხსიერება 20%-ზე ნაკლებია, შექმნის გაფრთხილების ფაილს warning.log-ს და ჩაწერს შესაბამის შეტყობინებას თარიღთან ერთად.
ნებისმიერ შემთხვევაში script ფაილში მიუთითეთ თქვენი სახელი როგორც ფაილის შემქმნელის და ასევე დოკუმენტაციისთვის სკრიპტშივე აღწერეთ შესრულებული ოპერაციები. მუშა სკრიპტი შეგიძლიათ ფაილის სახით თან დაურთოთ საგამოცდო ფაილს.
#!/bin/bash
# ავტორი: [თქვენი სახელი]
# აღწერა: ეს სკრიპტი შემოწმებს სისტემის მეხსიერების გამოყენებას.
#         თუ თავისუფალი მეხსიერება 20%-ზე ნაკლებია, ის შექმნის warning.log ფაილს
#         და ჩაწერს შესაბამის შეტყობინებას თარიღთან ერთად.

# მიიღეთ მეხსიერების სტატისტიკა (total, used, free)
memory_info=$(free -m)

# თავისუფალი მეხსიერების პროცენტი
free_memory_percentage=$(echo "$memory_info" | awk 'NR==2{print $4/$2*100}')

# შემოწმება, თუ თავისუფალი მეხსიერება ნაკლებია 20%-ზე
if (( $(echo "$free_memory_percentage < 20" | bc -l) )); then
    # შექმენით warning.log ფაილი თუ თავისუფალი მეხსიერება 20%-ზე ნაკლებია
    echo "$(date): WARNING! Free memory is below 20%. Current free memory: $free_memory_percentage%" >> warning.log
    echo "Warning log created: The free memory is below 20%."
else
    echo "Sufficient memory available. No warning needed."
fi



bash script 3
დაწერეთ bash სკრიპტი რომელიც შექმნის /srv დირექტორიის სარეზერვო ასლს (backup-ს) და ჩაწერს მას  ~/backup დირექტორიაში (ასეთი დირექტორიის არ არსებობის შემთხვევაში ჯერ შეიქმნას ის). სარეზერვო ასლი უნდა იყოს წარმოდგენილი სახელით რომელიც შეებამება დროს რომელიც შექმნის მომენტში იყო. ამასთან უნდა მოხდეს ამ ფაილის არქივაცია და შეკუმშვა ერთდროულად tar.gz ფორმატში.  cron-ის საშუალებით სკრიპტი გაეშვას ყოველ შაბათ დღეს ღამის 00:00 წუთზე. ამისთვის დაგჭირდებათ crontab-ის ფაილის რედაქტირება.
ნებისმიერ შემთხვევაში script ფაილში მიუთითეთ თქვენი სახელი როგორც ფაილის შემქმნელის და ასევე დოკუმენტაციისთვის სკრიპტშივე აღწერეთ შესრულებული ოპერაციები. მუშა სკრიპტი შეგიძლიათ ფაილის სახით თან დაურთოთ საგამოცდო ფაილს.
#!/bin/bash
# ავტორი: [თქვენი სახელი]
# აღწერა: ეს სკრიპტი შექმნის /srv დირექტორიის სარეზერვო ასლს და ჩაწერს მას ~/backup დირექტორიაში.
#         სარეზერვო ასლი იქნება tar.gz ფორმატში და ჩაწერილი იქნება დროის მარკირებით.
#         ასევე, თუ ~/backup დირექტორია არ არსებობს, ის შექმნიან.
#         სკრიპტი განახორციელებს ამ პროცესს ყოველ შაბათს 00:00 საათზე cron-ის საშუალებით.

# დააყენეთ ძველი სარეზერვო ასლი
src_dir="/srv"
backup_dir="$HOME/backup"

# შექმნათ ~/backup დირექტორია, თუ ის არ არსებობს
if [ ! -d "$backup_dir" ]; then
    mkdir -p "$backup_dir"
fi

# სარეზერვო ასლის შექმნისთვის დროის მარკირება
timestamp=$(date +"%Y%m%d_%H%M%S")
backup_file="${backup_dir}/srv_backup_${timestamp}.tar.gz"

# /srv დირექტორიის შეკუმშვა tar.gz ფორმატში
tar -czf "$backup_file" -C "$src_dir" .

# შეტყობინების გამოშვება
echo "Backup created: $backup_file"

# cron-თვის:
# გამოიყენეთ crontab-ის ფაილის რედაქტირება და დაამატეთ შემდეგი ხაზი:
# 0 0 * * 6 /path/to/your/backup_script.sh



bash script 4
დაწერეთ bash სკრიპტი რომელიც შეამოწმებს linux ოპერაციული სისტემის დისტრიბუციის ვერსიას. დისტრიბუტივის დადგენის შემდეგ გაუშვებს სისტემის განახლებას დისტრიბუტივისთვის შესაბამისი ბრძანების მიხედვით. ამასთან ერთად განახლების პროცესი არ აისახოს ტერმინალში და ჩაიწეროს მხოლოდ update_log.log ფაილში (რომელიც სასურველია განთავსდეს სპეციალურ დირექტორიაში, სახელი თქვენ შეურჩიეთ ) (დაგჭირდებათ პირობის ოპერატორების გამოყენება). ოპერაცია დასრულდეს შეტყობინებით: „სისტემის განახლება წარმატებით განხორციელდა“. სურვილისამებრ შეგიძლიათ დაამატოთ ფუნქციები და გააფორმოთ სკრიპტის ფაილი.
ნებისმიერ შემთხვევაში script ფაილში მიუთითეთ თქვენი სახელი როგორც ფაილის შემქმნელის და ასევე დოკუმენტაციისთვის სკრიპტშივე აღწერეთ შესრულებული ოპერაციები. მუშა სკრიპტი შეგიძლიათ ფაილის სახით თან დაურთოთ საგამოცდო ფაილს.
#!/bin/bash
# ავტორი: [თქვენი სახელი]
# აღწერა: ეს სკრიპტი შემოწმებს Linux დისტრიბუციას და განახლებას შესაბამისი ბრძანებით.
#         განახლების პროცესი არ აისახება ტერმინალში და ჩაიწერება მხოლოდ update_log.log ფაილში.

# სპეციალური დირექტორია, სადაც ჩანაწერი იქნება
log_dir="$HOME/system_update_logs"
log_file="${log_dir}/update_log.log"

# შექმნათ log_dir დირექტორია, თუ ის არ არსებობს
if [ ! -d "$log_dir" ]; then
    mkdir -p "$log_dir"
fi

# სისტემის დისტრიბუციის დადგენა
distro=$(lsb_release -i | awk -F: '{print $2}' | xargs)

# დისტრიბუციის მიხედვით განახლების ბრძანებების შეყვანა
if [ "$distro" == "Ubuntu" ] || [ "$distro" == "Debian" ]; then
    update_command="sudo apt-get update && sudo apt-get upgrade -y"
elif [ "$distro" == "CentOS" ] || [ "$distro" == "RedHatEnterpriseServer" ]; then
    update_command="sudo yum update -y"
elif [ "$distro" == "Fedora" ]; then
    update_command="sudo dnf update -y"
elif [ "$distro" == "Arch" ]; then
    update_command="sudo pacman -Syu --noconfirm"
else
    echo "Unsupported distribution: $distro"
    exit 1
fi

# განახლების პროცესი - შედეგების ჩაწერა მხოლოდ ფაილში
echo "Starting system update for $distro on $(date)" >> "$log_file"
$update_command >> "$log_file" 2>&1

# განახლების დასრულების შეტყობინება
if [ $? -eq 0 ]; then
    echo "System update successfully completed." | tee -a "$log_file"
else
    echo "System update failed." | tee -a "$log_file"
    exit 1
fi



bash script 5
დაწერეთ bash სკრიპტი რომელიც შექმნის /usr დირექტორიის სარეზერვო ასლს (backup-ს) და ჩაწერს მას  ~/backup დირექტორიაში (ასეთი დირექტორიის არ არსებობის შემთხვევაში ჯერ შეიქმნას ის). სარეზერვო ასლი უნდა იყოს წარმოდგენილი სახელით რომელიც შეებამება დროს რომელიც შექმნის მომენტში იყო. ამასთან უნდა მოხდეს ამ ფაილის არქივაცია და შეკუმშვა ერთდროულად tar.gz ფორმატში.  cron-ის საშუალებით სკრიპტი გაეშვას ყოველ პარასკევს ღამის 00:00 წუთზე. ამისთვის დაგჭირდებათ crontab-ის ფაილის რედაქტირება.
ნებისმიერ შემთხვევაში script ფაილში მიუთითეთ თქვენი სახელი როგორც ფაილის შემქმნელის და ასევე დოკუმენტაციისთვის სკრიპტშივე აღწერეთ შესრულებული ოპერაციები. მუშა სკრიპტი შეგიძლიათ ფაილის სახით თან დაურთოთ საგამოცდო ფაილს.
#!/bin/bash
# ავტორი: [თქვენი სახელი]
# აღწერა: ეს სკრიპტი შექმნის /usr დირექტორიის სარეზერვო ასლს,
#          რომელიც ჩაიწერება ~/backup დირექტორიაში tar.gz ფორმატში.

# პარამეტრები
backup_dir="$HOME/backup"
timestamp=$(date +"%Y%m%d%H%M%S")
backup_file="${backup_dir}/usr_backup_${timestamp}.tar.gz"
source_dir="/usr"

# ~/backup დირექტორიის შექმნა, თუ ის არ არსებობს
if [ ! -d "$backup_dir" ]; then
    mkdir -p "$backup_dir"
    echo "Created backup directory: $backup_dir"
fi

# სარეზერვო ასლის შექმნა და შეკუმშვა tar.gz ფორმატში
tar -czf "$backup_file" "$source_dir"
if [ $? -eq 0 ]; then
    echo "Backup successful: $backup_file"
else
    echo "Backup failed"
    exit 1
fi



bash script 5
დაწერეთ bash სკრიპტი რომელიც თქვენს მიერ მითითებულ მისამართზე დაახარისხებს სხვადასხვა ტიპის ფაილებს (მაგალითად: .txt, .jpg, .mp3, .avi ). არ არსებობის შემთხვევაში შექმნის შესაბამის საქაღალდეებს მომხმარებლის Documents დირექტორიაში სახელწოდებით DOCS, PHOTOS, MUSICS, VIDEOS და გადაანაწილებს ფაილებს მათი ტიპის მიხედვით ამ დირექტორიებში. უცნობი ფაილის ტიპის პოვნის შემთხვევაში გამოიტანოს შეტყობინე „უცნობი ტიპის ფაილი“ და მიეთითოს რომელ ფაილს გულისხმობს. (სხვადასხვა ტიპის ფაილების შესაქმენლად და სკრიპტის დასატესტად შექმენით ცარიელი ფაილები touch-ის გამოყენებით).
ნებისმიერ შემთხვევაში script ფაილში მიუთითეთ თქვენი სახელი როგორც ფაილის შემქმნელის და ასევე დოკუმენტაციისთვის სკრიპტშივე აღწერეთ შესრულებული ოპერაციები. მუშა სკრიპტი შეგიძლიათ ფაილის სახით თან დაურთოთ საგამოცდო ფაილს.
#!/bin/bash
# ავტორი: [თქვენი სახელი]
# აღწერა: ეს სკრიპტი დაახარისხებს სხვადასხვა ტიპის ფაილებს
#          და განათავსებს მათ შესაბამის დირექტორიებში.
#          თუ დირექტორია არ არსებობს, იგი შეიქმნება.

# დირექტორია, სადაც ფაილების გადანაწილება ხდება
directory="$HOME/Documents"

# საქაღალდეების შექმნა, თუ ისინი არ არსებობენ
mkdir -p "$directory/DOCS" "$directory/PHOTOS" "$directory/MUSICS" "$directory/VIDEOS"

# ყველა ფაილის ნავიგაცია მითითებულ დირექტორიაში
for file in "$directory"/*; do
    # მხოლოდ ფაილები (არ დირექტორიები)
    if [ -f "$file" ]; then
        # ფაილის გაფართოება
        extension="${file##*.}"
        
        case $extension in
            txt)
                mv "$file" "$directory/DOCS/"
                echo "Moved $file to DOCS"
                ;;
            jpg|jpeg|png|gif)
                mv "$file" "$directory/PHOTOS/"
                echo "Moved $file to PHOTOS"
                ;;
            mp3|wav|flac)
                mv "$file" "$directory/MUSICS/"
                echo "Moved $file to MUSICS"
                ;;
            avi|mp4|mkv)
                mv "$file" "$directory/VIDEOS/"
                echo "Moved $file to VIDEOS"
                ;;
            *)
                echo "Unknown file type: $file"
                ;;
        esac
    fi
done
 
 
 
bash script 6
დაწერეთ bash სკრიპტი რომელიც შექმნის /var/lib/mysql დირექტორიის სარეზერვო ასლს (backup-ს) და ჩაწერს მას  ~/backup დირექტორიაში (ასეთი დირექტორიის არ არსებობის შემთხვევაში ჯერ შეიქმნას ის). სარეზერვო ასლი უნდა იყოს წარმოდგენილი სახელით რომელიც შეებამება დროს რომელიც შექმნის მომენტში იყო. ამასთან უნდა მოხდეს ამ ფაილის არქივაცია და შეკუმშვა ერთდროულად tar.gz ფორმატში.  cron-ის საშუალებით სკრიპტი გაეშვას ყოველ კვირა დღეს ღამის 00:00 წუთზე. ამისთვის დაგჭირდებათ crontab-ის ფაილის რედაქტირება.
ნებისმიერ შემთხვევაში script ფაილში მიუთითეთ თქვენი სახელი როგორც ფაილის შემქმნელის და ასევე დოკუმენტაციისთვის სკრიპტშივე აღწერეთ შესრულებული ოპერაციები. მუშა სკრიპტი შეგიძლიათ ფაილის სახით თან დაურთოთ საგამოცდო ფაილს.
#!/bin/bash
# ავტორი: [თქვენი სახელი]
# აღწერა: სკრიპტი ქმნის სარეზერვო ასლს /var/lib/mysql დირექტორიისგან, 
#          ჩაწერს მას ~/backup დირექტორიაში და არქივდება tar.gz ფორმატში.
#          სკრიპტი დაიშვება ყოველ კვირა ღამის 00:00-ზე.

# დარეგისტრირება, რომ ~/backup დირექტორია არსებობს ან მისი შექმნა
backup_dir="$HOME/backup"
mkdir -p "$backup_dir"

# სარეზერვო ასლის სახელის განსაზღვრა მიმდინარე დროით
current_time=$(date +"%Y%m%d_%H%M%S")
backup_file="$backup_dir/mysql_backup_$current_time.tar.gz"

# /var/lib/mysql დირექტორიის არქივაცია და შეკუმშვა
tar -czf "$backup_file" /var/lib/mysql

# ფუნქციის შედეგი
if [ $? -eq 0 ]; then
    echo "Backup successfully created at $backup_file"
else
    echo "Error occurred while creating backup"
fi




bash script 7
დაწერეთ bash სკრიპტი რომელიც შექმნის /var/lib/postgresql დირექტორიის სარეზერვო ასლს (backup-ს) და ჩაწერს მას  ~/backup დირექტორიაში (ასეთი დირექტორიის არ არსებობის შემთხვევაში ჯერ შეიქმნას ის). სარეზერვო ასლი უნდა იყოს წარმოდგენილი სახელით რომელიც შეებამება დროს რომელიც შექმნის მომენტში იყო. ამასთან უნდა მოხდეს ამ ფაილის არქივაცია და შეკუმშვა ერთდროულად tar.gz ფორმატში.  cron-ის საშუალებით სკრიპტი გაეშვას ყოველ კვირა დღეს ღამის 00:00 წუთზე. ამისთვის დაგჭირდებათ crontab-ის ფაილის რედაქტირება.
ნებისმიერ შემთხვევაში script ფაილში მიუთითეთ თქვენი სახელი როგორც ფაილის შემქმნელის და ასევე დოკუმენტაციისთვის სკრიპტშივე აღწერეთ შესრულებული ოპერაციები. მუშა სკრიპტი შეგიძლიათ ფაილის სახით თან დაურთოთ საგამოცდო ფაილს.
#!/bin/bash
# ავტორი: [თქვენი სახელი]
# აღწერა: სკრიპტი ქმნის სარეზერვო ასლს /var/lib/postgresql დირექტორიისგან, 
#          ჩაწერს მას ~/backup დირექტორიაში და არქივდება tar.gz ფორმატში.
#          სკრიპტი დაიშვება ყოველ კვირა ღამის 00:00-ზე.

# დარეგისტრირება, რომ ~/backup დირექტორია არსებობს ან მისი შექმნა
backup_dir="$HOME/backup"
mkdir -p "$backup_dir"

# სარეზერვო ასლის სახელის განსაზღვრა მიმდინარე დროით
current_time=$(date +"%Y%m%d_%H%M%S")
backup_file="$backup_dir/postgresql_backup_$current_time.tar.gz"

# /var/lib/postgresql დირექტორიის არქივაცია და შეკუმშვა
tar -czf "$backup_file" /var/lib/postgresql

# ფუნქციის შედეგი
if [ $? -eq 0 ]; then
    echo "Backup successfully created at $backup_file"
else
    echo "Error occurred while creating backup"
fi



bash script 8
დაწერეთ bash სკრიპტი რომელიც მოგცემთ შესაძლებლობას შეამოწმოთ არსებობს თუ არა კონკრეტული სახელის ფაილი კონკრეტულ მისამართზე. (შეგიძლიათ როგორც დირექტორია ასევე ჩვეულებრივი ფაილი გამოიყენოთ). თუ არსებოს გამოიტანოს შეტყობინება რომ ფაილი არსებობს და თუ არ არსებობს მაშინ-ფაილი არ არსებობს და გკითხოთ გსურთ თუ არა შექმნათ შესაბამისი სახელწოდების დირექტორია/ფაილი. „yes” პასუხის შემთხვევაში შეიქმნას დირექტორია/ფაილი მომხმარებლის Documents საქაღალდეში და დაიწეროს რომ „ფაილი წარმატებით შეიქმნა“. სხვა შემთხვევაში პროგრამა დაიხუროს. (თქვენი სურვილისამებრ შეგიძლიათ დაამატოთ სხვადასხვა ფუნქციები, მაგალითად დაყოვნებები, შეტყობინებები ეკრანზე და ა.შ). 
ნებისმიერ შემთხვევაში script ფაილში მიუთითეთ თქვენი სახელი როგორც ფაილის შემქმნელის და ასევე დოკუმენტაციისთვის სკრიპტშივე აღწერეთ შესრულებული ოპერაციები. მუშა სკრიპტი შეგიძლიათ ფაილის სახით თან დაურთოთ საგამოცდო ფაილს.

#!/bin/bash
# ავტორი: [თქვენი სახელი]
# აღწერა: სკრიპტი ამოწმებს, არსებობს თუ არა კონკრეტული ფაილი ან დირექტორია.
#          თუ არ არსებობს, ეკრანზე გამოდის შეტყობინება, გკითხავთ მისი შექმნის შესახებ და შესთავაზებს შექმნას.

# ფაილის/დირექტორიის მისამართი
echo "გთხოვთ, შეიტანოთ ფაილის ან დირექტორიის სრული მისამართი:"
read file_path

# შემოწმება თუ არსებობს ფაილი ან დირექტორია
if [ -e "$file_path" ]; then
    echo "ფაილი/დირექტორია $file_path არსებობს."
else
    echo "ფაილი/დირექტორია $file_path არ არსებობს."
    # მომხმარებელს ვკითხულობთ თუ სურს შექმნას
    echo "გსურთ თუ არა შექმნათ შესაბამისი ფაილი/დირექტორია (yes/no)?"
    read answer
    if [ "$answer" == "yes" ]; then
        # თუ დირექტორიაა
        if [[ "$file_path" == */ ]]; then
            mkdir -p "$file_path" && echo "დირექტორია წარმატებით შეიქმნა."
        else
            # თუ ჩვეულებრივი ფაილია
            touch "$file_path" && echo "ფაილი წარმატებით შეიქმნა."
        fi
    else
        echo "პროგრამა დაიხურა."
    fi
fi

